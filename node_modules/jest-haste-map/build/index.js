'use strict';

function _child_process() {
  const data = require('child_process');

  _child_process = function _child_process() {
    return data;
  };

  return data;
}

function _crypto() {
  const data = _interopRequireDefault(require('crypto'));

  _crypto = function _crypto() {
    return data;
  };

  return data;
}

function _events() {
  const data = _interopRequireDefault(require('events'));

  _events = function _events() {
    return data;
  };

  return data;
}

function _os() {
  const data = _interopRequireDefault(require('os'));

  _os = function _os() {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require('path'));

  _path = function _path() {
    return data;
  };

  return data;
}

function _sane() {
  const data = _interopRequireDefault(require('sane'));

  _sane = function _sane() {
    return data;
  };

  return data;
}

function _invariant() {
  const data = _interopRequireDefault(require('invariant'));

  _invariant = function _invariant() {
    return data;
  };

  return data;
}

function _jestSerializer() {
  const data = _interopRequireDefault(require('jest-serializer'));

  _jestSerializer = function _jestSerializer() {
    return data;
  };

  return data;
}

function _jestWorker() {
  const data = _interopRequireDefault(require('jest-worker'));

  _jestWorker = function _jestWorker() {
    return data;
  };

  return data;
}

var _worker = require('./worker');

var _getMockName = _interopRequireDefault(require('./getMockName'));

var _getPlatformExtension = _interopRequireDefault(
  require('./lib/getPlatformExtension')
);

var _constants = _interopRequireDefault(require('./constants'));

var _HasteFS = _interopRequireDefault(require('./HasteFS'));

var _ModuleMap = _interopRequireDefault(require('./ModuleMap'));

var _node = _interopRequireDefault(require('./crawlers/node'));

var _normalizePathSep = _interopRequireDefault(
  require('./lib/normalizePathSep')
);

var _watchman = _interopRequireDefault(require('./crawlers/watchman'));

var _WatchmanWatcher = _interopRequireDefault(require('./lib/WatchmanWatcher'));

var _FSEventsWatcher = _interopRequireDefault(require('./lib/FSEventsWatcher'));

var fastPath = _interopRequireWildcard(require('./lib/fast_path'));

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};
    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc =
            Object.defineProperty && Object.getOwnPropertyDescriptor
              ? Object.getOwnPropertyDescriptor(obj, key)
              : {};
          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }
    newObj.default = obj;
    return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest()
  );
}

function _nonIterableRest() {
  throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;
  try {
    for (
      var _i = arr[Symbol.iterator](), _s;
      !(_n = (_s = _i.next()).done);
      _n = true
    ) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i['return'] != null) _i['return']();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function() {
    var self = this,
      args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }
      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

const CHANGE_INTERVAL = 30;
const MAX_WAIT_TIME = 240000;

const NODE_MODULES = _path().default.sep + 'node_modules' + _path().default.sep;

const PACKAGE_JSON = _path().default.sep + 'package.json'; // TypeScript doesn't like us importing from outside 
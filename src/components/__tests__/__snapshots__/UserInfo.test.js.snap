// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<UserInfo /> renders <div> and texts 1`] = `
<Fragment>
  <EmotionCssPropInternal
    __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
    css={
      Object {
        "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
        "name": "187ieup-gridBoxForUser-UserInfo",
        "next": undefined,
        "styles": "display:flex;flex-direction:column;margin-top:90px;margin-left:30px;;label:gridBoxForUser;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
        "toString": [Function],
      }
    }
  >
    <EmotionCssPropInternal
      __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
      css={
        Object {
          "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
          "name": "1rrqh9e-fix-UserInfo",
          "next": undefined,
          "styles": "position:fixed;;label:fix;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
          "toString": [Function],
        }
      }
    >
      <EmotionCssPropInternal
        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
        css={
          Object {
            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "name": "1gb34p0-nameAndPicture-UserInfo",
            "next": undefined,
            "styles": "display:flex;align-items:center;margin-bottom:18px;padding-left:5px;;label:nameAndPicture;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "toString": [Function],
          }
        }
      >
        <EmotionCssPropInternal
          __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="img"
          alt="Smiley face"
          css={
            Object {
              "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
              "name": "67s7ui-borderRadius-UserInfo",
              "next": undefined,
              "styles": "border-radius:50%;grid-column-start:2;;label:borderRadius;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
              "toString": [Function],
            }
          }
          height="50"
          width="50"
        />
        <EmotionCssPropInternal
          __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
          __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Link",
              "propTypes": Object {
                "innerRef": [Function],
                "onClick": [Function],
                "replace": [Function],
                "target": [Function],
                "to": [Function],
              },
              "render": [Function],
            }
          }
          css={
            Object {
              "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
              "name": "1ktyizr-linkCss-UserInfo",
              "next": undefined,
              "styles": "text-decoration:none;display:flex;flex-direction:column;;label:linkCss;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
              "toString": [Function],
            }
          }
          onClick={[Function]}
          to="/profile/undefined"
        >
          <EmotionCssPropInternal
            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
            css={
              Object {
                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "name": "19eag9b-name-UserInfo",
                "next": undefined,
                "styles": "margin-left:12px;color:black;;label:name;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "toString": [Function],
              }
            }
          >
            gibong
          </EmotionCssPropInternal>
        </EmotionCssPropInternal>
      </EmotionCssPropInternal>
      <EmotionCssPropInternal
        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
        css={
          Object {
            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "name": "1dtsmzj-story-UserInfo",
            "next": undefined,
            "styles": "font-weight:500;display:flex;flex-direction:column;width:259px;margin-bottom:18px;border:groove;padding:10px 16px 10px 16px;color:rgba(var(--f52,153,153,153),1);background-color:white;border:1px solid rgba(var(--b6a,219,219,219),1);font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Helvetica,Arial,sans-serif;;label:story;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "toString": [Function],
          }
        }
      >
        스토리
        <span
          style={
            Object {
              "fontWeight": 350,
              "marginBottom": "4px",
              "marginTop": "10px",
            }
          }
        >
          회원님이 팔로우하는 사람들의 스토리가 여기에 표시 안됩니다.
        </span>
      </EmotionCssPropInternal>
      <EmotionCssPropInternal
        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
        css={
          Object {
            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "name": "1okigrb-friends-UserInfo",
            "next": undefined,
            "styles": "min-height:100px;height:auto;width:259px;margin-bottom:18px;border:groove;padding:12px 16px 0px 16px;color:rgba(var(--f52,153,153,153),1);background-color:white;border:1px solid rgba(var(--b6a,219,219,219),1);font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Helvetica,Arial,sans-serif;;label:friends;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "toString": [Function],
          }
        }
      >
        <EmotionCssPropInternal
          __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
          css={
            Object {
              "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
              "name": "197fknu-friendsTitle-UserInfo",
              "next": undefined,
              "styles": "font-weight:500;;label:friendsTitle;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
              "toString": [Function],
            }
          }
        >
          회원님을 위한 추천
        </EmotionCssPropInternal>
        <EmotionCssPropInternal
          __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
          css={
            Object {
              "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
              "name": "yppn8d-friendsImagesAndNames-UserInfo",
              "next": undefined,
              "styles": "flex-direction:column;display:flex;margin-top:16px;;label:friendsImagesAndNames;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXJJbmZvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9HaUIiLCJmaWxlIjoiVXNlckluZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuXG5pbXBvcnQgeyBnZXRVc2VySW5mb0FQSSB9IGZyb20gJy4uL2FwaXMvUG9zdFBhZ2UnO1xuaW1wb3J0IHsgZ2V0UmFuZG9tVXNlciwgQWRkRm9sbG93ZXIgfSBmcm9tICcuLi9hcGlzL1RpbWVMaW5lUGFnZUFwaXMnO1xuXG5mdW5jdGlvbiBVc2VySW5mbyh7IHVzZXIsIHNldFVzZXJPZkFjdGl2ZVBhZ2UsIGN1cnJlbnRVc2VyIH0pIHtcbiAgY29uc3QgW2luZm8sIHNldEluZm9dID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcmFuZG9tVXNlcnMsIHNldFJhbmRvbVVzZXJzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgdXNlckluZm8gPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0VXNlckluZm9BUEkodXNlcik7XG4gICAgICBzZXRJbmZvKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2FsbFJhbmRvbVVzZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UmFuZG9tVXNlcih1c2VyKTtcbiAgICAgIHNldFJhbmRvbVVzZXJzKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkQ2xpY2tlZEZvbGxvd2VyID0gYXN5bmMgbmFtZSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQWRkRm9sbG93ZXIobmFtZSk7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnc3VjY2VzcycsXG4gICAgICAgIHRpdGxlOiAnRm9sbG93aW5nJ1xuICAgICAgICAvLyB0ZXh0OiBcIkhvXCJcbiAgICAgIH0pO1xuICAgICAgY2FsbFJhbmRvbVVzZXIoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2hhbmdlVG9DdXJyZW50VXNlciA9ICgpID0+IHtcbiAgICBzZXRVc2VyT2ZBY3RpdmVQYWdlKGN1cnJlbnRVc2VyKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHVzZXJJbmZvKCk7XG4gICAgY2FsbFJhbmRvbVVzZXIoKTtcbiAgfSwgW10pO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNzcz17W2dyaWRCb3hGb3JVc2VyXX0+XG4gICAgICAgIDxkaXYgY3NzPXtbZml4XX0+XG4gICAgICAgICAgPGRpdiBjc3M9e1tuYW1lQW5kUGljdHVyZV19PlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBzcmM9e2luZm8udXNlclVSTH1cbiAgICAgICAgICAgICAgYWx0PVwiU21pbGV5IGZhY2VcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCI1MFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiNTBcIlxuICAgICAgICAgICAgICBjc3M9e1tib3JkZXJSYWRpdXNdfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxMaW5rXG4gICAgICAgICAgICAgIHRvPXtgL3Byb2ZpbGUvJHtjdXJyZW50VXNlcn1gfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlVG9DdXJyZW50VXNlcigpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjc3M9e1tsaW5rQ3NzXX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbbmFtZV19Pnt1c2VyLnN1YnN0cmluZygwLCB1c2VyLmluZGV4T2YoJ0AnKSl9PC9zcGFuPlxuICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxzcGFuIGNzcz17W3N0b3J5XX0+XG4gICAgICAgICAgICDsiqTthqDrpqxcbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAnMTBweCcsXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAnNHB4JyxcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAzNTBcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg7ZqM7JuQ64uY7J20IO2MlOuhnOyasO2VmOuKlCDsgqzrnozrk6TsnZgg7Iqk7Yag66as6rCAIOyXrOq4sOyXkCDtkZzsi5wg7JWI65Cp64uI64ukLlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8ZGl2IGNzcz17W2ZyaWVuZHNdfT5cbiAgICAgICAgICAgIDxzcGFuIGNzcz17W2ZyaWVuZHNUaXRsZV19Pu2ajOybkOuLmOydhCDsnITtlZwg7LaU7LKcPC9zcGFuPlxuXG4gICAgICAgICAgICA8ZGl2IGNzcz17W2ZyaWVuZHNJbWFnZXNBbmROYW1lc119PlxuICAgICAgICAgICAgICB7cmFuZG9tVXNlcnMubWFwKCh1c2VyYSwgaSkgPT4gKFxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtgcmFuZG9tVXNlciR7aX1gfT5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kSW1hZ2VBbmROYW1lXX0+XG4gICAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgICBzcmM9e3VzZXJhLnVzZXJVUkx9XG4gICAgICAgICAgICAgICAgICAgICAgYWx0PVwiU21pbGV5IGZhY2VcIlxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e1tib3JkZXJSYWRpdXNdfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17dGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZX0+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvPXtgL3Byb2ZpbGUvJHt1c2VyYS5uYW1lfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVRvQ3VycmVudFVzZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3M9e1tsaW5rQ3NzXX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt1c2VyYS5uYW1lLnN1YnN0cmluZygwLCB1c2VyYS5uYW1lLmluZGV4T2YoJ0AnKSl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19Puy2lOyynDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtbZm9sbG93QnV0dG9uXX1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhZGRDbGlja2VkRm9sbG93ZXIodXNlcmEubmFtZSl9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICAgICAgICAgIO2MlOuhnOyasHsnICd9XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgey8qIHRlc3QgKi99XG4gICAgICAgICAgICAgIHsvKiA8ZGl2IGNzcz17W2ZyaWVuZEltYWdlQW5kTmFtZV19PlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17aW5mby51c2VyVVJMfVxuICAgICAgICAgICAgICAgICAgYWx0PVwiU21pbGV5IGZhY2VcIlxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MFwiXG4gICAgICAgICAgICAgICAgICBjc3M9e1tib3JkZXJSYWRpdXNdfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjc3M9e3RleHRCb3hGb3JmcmllbmRJbWFnZUFuZE5hbWV9PlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbbmFtZV19PlRlc3Q8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbZm9sbG93QnV0dG9uXX0+IO2MlOuhnOyasCA8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kSW1hZ2VBbmROYW1lXX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI0MFwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNzcz17dGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZX0+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+VGVzdDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W3JlY29tbWVuZGF0aW9uXX0+cmVjb21tZW5kYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tmb2xsb3dCdXR0b25dfT4g7YyU66Gc7JqwIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+ICovfVxuXG4gICAgICAgICAgICAgIHsvKiB0ZXN0ICovfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjc3M9e1tkdW5ub1RleHRdfT5cbiAgICAgICAgICAgIOyGjOqwnC3rj4Tsm4Drp5At7ZmN67O07IS87YSwLUFQSS3ssYTsmqnsoJXrs7Qt6rCc7J247KCV67O07LKY66as67Cp7LmoLeyVveq0gC3snITsuZgt7J246riw6rOE7KCVLe2VtOyLnO2DnOq3uC3slrjslrRcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNzcz17W2R1bm5vVGV4dF19PsKpIDIwMjAgQk9OR1NUQUdSQU08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuY29uc3QgbGlua0NzcyA9IGNzc2BcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gO1xuXG5jb25zdCBmaXggPSBjc3NgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbmA7XG5cbmNvbnN0IGR1bm5vVGV4dCA9IGNzc2BcbiAgY29sb3I6ICNjN2M3Yzc7XG4gIG1heC13aWR0aDogMjkzcHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbmA7XG5cbmNvbnN0IGZvbGxvd0J1dHRvbiA9IGNzc2BcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMDtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgY29sb3I6ICMyMTk2ZjM7XG4gIGN1cnNvcjogcG9pbnRlcjtcbmA7XG5jb25zdCByZWNvbW1lbmRhdGlvbiA9IGNzc2BcbiAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBjb2xvcjogcmdiYSh2YXIoLS1mNTIsIDE1MywgMTUzLCAxNTMpLCAxKTtcbmA7XG5jb25zdCB0ZXh0Qm94Rm9yZnJpZW5kSW1hZ2VBbmROYW1lID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYDtcblxuY29uc3QgZnJpZW5kSW1hZ2VBbmROYW1lID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gO1xuXG5jb25zdCBmcmllbmRzSW1hZ2VzQW5kTmFtZXMgPSBjc3NgXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbi10b3A6IDE2cHg7XG5gO1xuXG5jb25zdCBmcmllbmRzVGl0bGUgPSBjc3NgXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBzdG9yeSA9IGNzc2BcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IDI1OXB4O1xuICBtYXJnaW4tYm90dG9tOiAxOHB4O1xuICBib3JkZXI6IGdyb292ZTtcbiAgcGFkZGluZzogMTBweCAxNnB4IDEwcHggMTZweDtcbiAgY29sb3I6IHJnYmEodmFyKC0tZjUyLCAxNTMsIDE1MywgMTUzKSwgMSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWI2YSwgMjE5LCAyMTksIDIxOSksIDEpO1xuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCBSb2JvdG8sIEhlbHZldGljYSxcbiAgICBBcmlhbCwgc2Fucy1zZXJpZjtcbmA7XG5cbmNvbnN0IGZyaWVuZHMgPSBjc3NgXG4gIG1pbi1oZWlnaHQ6IDEwMHB4O1xuICBoZWlnaHQ6IGF1dG87XG4gIHdpZHRoOiAyNTlweDtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgYm9yZGVyOiBncm9vdmU7XG4gIHBhZGRpbmc6IDEycHggMTZweCAwcHggMTZweDtcbiAgY29sb3I6IHJnYmEodmFyKC0tZjUyLCAxNTMsIDE1MywgMTUzKSwgMSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWI2YSwgMjE5LCAyMTksIDIxOSksIDEpO1xuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCBSb2JvdG8sIEhlbHZldGljYSxcbiAgICBBcmlhbCwgc2Fucy1zZXJpZjtcbmA7XG5cbmNvbnN0IG5hbWUgPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBjb2xvcjogYmxhY2s7XG5gO1xuXG5jb25zdCBuYW1lQW5kUGljdHVyZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgcGFkZGluZy1sZWZ0OiA1cHg7XG5gO1xuY29uc3QgZ3JpZEJveEZvclVzZXIgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1hcmdpbi10b3A6IDkwcHg7XG4gIG1hcmdpbi1sZWZ0OiAzMHB4O1xuYDtcblxuY29uc3QgYm9yZGVyUmFkaXVzID0gY3NzYFxuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGdyaWQtY29sdW1uLXN0YXJ0OiAyO1xuYDtcblxuY29uc3QgbG9jYXRpb24zMyA9IGNzc2BcbiAgZ3JpZC1yb3ctc3RhcnQ6IDM7XG4gIGdyaWQtY29sdW1uLXN0YXJ0OiAzO1xuYDtcblxuY29uc3QgbG9jYXRpb24yMyA9IGNzc2BcbiAgZ3JpZC1yb3ctc3RhcnQ6IDE7XG4gIGdyaWQtY29sdW1uLXN0YXJ0OiAzO1xuICBmb250LXNpemU6IHh4LWxhcmdlO1xuYDtcblxuY29uc3QgbG9jYXRpb240MyA9IGNzc2BcbiAgZ3JpZC1yb3ctc3RhcnQ6IDM7XG4gIGdyaWQtY29sdW1uLXN0YXJ0OiA0O1xuYDtcblxuLy8gVXNlckluZm9IZWFkLnByb3BUeXBlcyA9IHtcbi8vICAgdXNlck9mQWN0aXZlUGFnZTogUHJvcFR5cGVzLnN0cmluZ1xuLy8gfTtcblxuLy8gVXNlckluZm9IZWFkLmRlZmF1bHRQcm9wcyA9IHtcbi8vICAgdXNlck9mQWN0aXZlUGFnZTogXCJcIlxuLy8gfTtcblxuZXhwb3J0IGRlZmF1bHQgVXNlckluZm87XG4iXX0= */",
              "toString": [Function],
            }
          }
        />
      </EmotionCssPropInternal>
      <EmotionCssPropInternal
        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
        css={
          Object {
            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "name": "1mw4o4v-dunnoText-UserInfo",
            "next": undefined,
            "styles": "color:#c7c7c7;max-width:293px;font-size:12px;margin-bottom:10px;;label:dunnoText;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "toString": [Function],
          }
        }
      >
        소개-도움말-홍보센터-API-채용정보-개인정보처리방침-약관-위치-인기계정-해시태그-언어
      </EmotionCssPropInternal>
      <EmotionCssPropInternal
        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
        css={
          Object {
            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "name": "1voxz5j-dunnoText-UserInfo",
            "next": undefined,
            "styles": "color:#c7c7c7;max-width:293px;font-size:12px;margin-bottom:10px;;label:dunnoText;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "toString": [Function],
          }
        }
      >
        © 2020 BONGSTAGRAM
      </EmotionCssPropInternal>
    </EmotionCssPropInternal>
  </EmotionCssPropInternal>
</Fragment>
`;

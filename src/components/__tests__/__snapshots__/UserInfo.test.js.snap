// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<UserInfo /> renders <div> and texts 1`] = `
<UserInfo
  user="gibong@gmail.com"
>
  <EmotionCssPropInternal
    __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
    css={
      Object {
        "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
        "name": "11a82u6-gridBoxForUser-UserInfo",
        "next": undefined,
        "styles": "display:flex;flex-direction:column;margin-top:90px;margin-left:30px;;label:gridBoxForUser;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
        "toString": [Function],
      }
    }
  >
    <div
      className="css-11a82u6-gridBoxForUser-UserInfo"
    >
      <EmotionCssPropInternal
        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
        css={
          Object {
            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
            "name": "1jv803l-fix-UserInfo",
            "next": undefined,
            "styles": "position:fixed;;label:fix;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXJJbmZvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEYSIsImZpbGUiOiJVc2VySW5mby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN3YWwgZnJvbSAnc3dlZXRhbGVydDInO1xuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IHsgZ2V0VXNlckluZm9BUEkgfSBmcm9tICcuLi9hcGlzL3Bvc3QnO1xuaW1wb3J0IHsgZ2V0UmFuZG9tVXNlciwgQWRkRm9sbG93ZXIgfSBmcm9tICcuLi9hcGlzL1RpbWVMaW5lUGFnZUFwaXMnO1xuXG5mdW5jdGlvbiBVc2VySW5mbyh7IHVzZXIgfSkge1xuICBjb25zdCBbaW5mbywgc2V0SW5mb10gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtyYW5kb21Vc2Vycywgc2V0UmFuZG9tVXNlcnNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCB1c2VySW5mbyA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBnZXRVc2VySW5mb0FQSSh1c2VyKTtcbiAgICAgIHNldEluZm8ocmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgIGljb246ICdlcnJvcicsXG4gICAgICAgIHRpdGxlOiAnT29wcy4uLicsXG4gICAgICAgIHRleHQ6ICdJbnRlcm5hbCBFcnJvcidcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjYWxsUmFuZG9tVXNlciA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBnZXRSYW5kb21Vc2VyKHVzZXIpO1xuICAgICAgc2V0UmFuZG9tVXNlcnMocmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgIGljb246ICdlcnJvcicsXG4gICAgICAgIHRpdGxlOiAnT29wcy4uLicsXG4gICAgICAgIHRleHQ6ICdJbnRlcm5hbCBFcnJvcidcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRDbGlja2VkRm9sbG93ZXIgPSBhc3luYyBuYW1lID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBBZGRGb2xsb3dlcihuYW1lKTtcbiAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgIGljb246ICdzdWNjZXNzJyxcbiAgICAgICAgdGl0bGU6ICdGb2xsb3dpbmcnXG4gICAgICAgIC8vIHRleHQ6IFwiSG9cIlxuICAgICAgfSk7XG4gICAgICBjYWxsUmFuZG9tVXNlcigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgIGljb246ICdlcnJvcicsXG4gICAgICAgIHRpdGxlOiAnT29wcy4uLicsXG4gICAgICAgIHRleHQ6ICdJbnRlcm5hbCBFcnJvcidcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHVzZXJJbmZvKCk7XG4gICAgY2FsbFJhbmRvbVVzZXIoKTtcbiAgfSwgW10pO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNzcz17W2dyaWRCb3hGb3JVc2VyXX0+XG4gICAgICAgIDxkaXYgY3NzPXtbZml4XX0+XG4gICAgICAgICAgPGRpdiBjc3M9e1tuYW1lQW5kUGljdHVyZV19PlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBzcmM9e2luZm8udXNlclVSTH1cbiAgICAgICAgICAgICAgYWx0PVwiU21pbGV5IGZhY2VcIlxuICAgICAgICAgICAgICBoZWlnaHQ9XCI1MFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiNTBcIlxuICAgICAgICAgICAgICBjc3M9e1tib3JkZXJSYWRpdXNdfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuIGNzcz17W25hbWVdfT57dXNlci5zdWJzdHJpbmcoMCwgdXNlci5pbmRleE9mKCdAJykpfTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8c3BhbiBjc3M9e1tzdG9yeV19PlxuICAgICAgICAgICAg7Iqk7Yag66asXG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogJzEwcHgnLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzRweCcsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogMzUwXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIO2ajOybkOuLmOydtCDtjJTroZzsmrDtlZjripQg7IKs656M65Ok7J2YIOyKpO2GoOumrOqwgCDsl6zquLDsl5Ag7ZGc7IucIOyViOuQqeuLiOuLpC5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPGRpdiBjc3M9e1tmcmllbmRzXX0+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e1tmcmllbmRzVGl0bGVdfT7tmozsm5Dri5jsnYQg7JyE7ZWcIOy2lOyynDwvc3Bhbj5cblxuICAgICAgICAgICAgPGRpdiBjc3M9e1tmcmllbmRzSW1hZ2VzQW5kTmFtZXNdfT5cbiAgICAgICAgICAgICAge3JhbmRvbVVzZXJzLm1hcCgodXNlcmEsIGkpID0+IChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17YHJhbmRvbVVzZXIke2l9YH0+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17W2ZyaWVuZEltYWdlQW5kTmFtZV19PlxuICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgc3JjPXt1c2VyYS51c2VyVVJMfVxuICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIlNtaWxleSBmYWNlXCJcbiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI0MFwiXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MFwiXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtbYm9yZGVyUmFkaXVzXX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3RleHRCb3hGb3JmcmllbmRJbWFnZUFuZE5hbWV9PlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W25hbWVdfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt1c2VyYS5uYW1lLnN1YnN0cmluZygwLCB1c2VyYS5uYW1lLmluZGV4T2YoJ0AnKSl9XG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W3JlY29tbWVuZGF0aW9uXX0+cmVjb21tZW5kYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtbZm9sbG93QnV0dG9uXX1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhZGRDbGlja2VkRm9sbG93ZXIodXNlcmEubmFtZSl9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICAgICAgICAgIO2MlOuhnOyasHsnICd9XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgey8qIHRlc3QgKi99XG4gICAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kSW1hZ2VBbmROYW1lXX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI0MFwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNzcz17dGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZX0+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+VGVzdDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W3JlY29tbWVuZGF0aW9uXX0+cmVjb21tZW5kYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tmb2xsb3dCdXR0b25dfT4g7YyU66Gc7JqwIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgPGRpdiBjc3M9e1tmcmllbmRJbWFnZUFuZE5hbWVdfT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e2luZm8udXNlclVSTH1cbiAgICAgICAgICAgICAgICAgIGFsdD1cIlNtaWxleSBmYWNlXCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDBcIlxuICAgICAgICAgICAgICAgICAgY3NzPXtbYm9yZGVyUmFkaXVzXX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt0ZXh0Qm94Rm9yZnJpZW5kSW1hZ2VBbmROYW1lfT5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W25hbWVdfT5UZXN0PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbcmVjb21tZW5kYXRpb25dfT5yZWNvbW1lbmRhdGlvbjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W2ZvbGxvd0J1dHRvbl19PiDtjJTroZzsmrAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICB7LyogdGVzdCAqL31cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY3NzPXtbZHVubm9UZXh0XX0+XG4gICAgICAgICAgICDshozqsJwt64+E7JuA66eQLe2ZjeuztOyEvO2EsC1BUEkt7LGE7Jqp7KCV67O0LeqwnOyduOygleuztOyymOumrOuwqey5qC3slb3qtIAt7JyE7LmYLeyduOq4sOqzhOyglS3tlbTsi5ztg5zqt7gt7Ja47Ja0XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjc3M9e1tkdW5ub1RleHRdfT7CqSAyMDIwIEJPTkdTVEFHUkFNPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC8+XG4gICk7XG59XG5cbmNvbnN0IGZpeCA9IGNzc2BcbiAgcG9zaXRpb246IGZpeGVkO1xuYDtcblxuY29uc3QgZHVubm9UZXh0ID0gY3NzYFxuICBjb2xvcjogI2M3YzdjNztcbiAgbWF4LXdpZHRoOiAyOTNweDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuYDtcblxuY29uc3QgZm9sbG93QnV0dG9uID0gY3NzYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICBjb2xvcjogIzIxOTZmMztcbmA7XG5jb25zdCByZWNvbW1lbmRhdGlvbiA9IGNzc2BcbiAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbmA7XG5jb25zdCB0ZXh0Qm94Rm9yZnJpZW5kSW1hZ2VBbmROYW1lID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYDtcblxuY29uc3QgZnJpZW5kSW1hZ2VBbmROYW1lID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gO1xuXG5jb25zdCBmcmllbmRzSW1hZ2VzQW5kTmFtZXMgPSBjc3NgXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbi10b3A6IDE2cHg7XG5gO1xuXG5jb25zdCBmcmllbmRzVGl0bGUgPSBjc3NgXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBzdG9yeSA9IGNzc2BcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IDI1OXB4O1xuICBtYXJnaW4tYm90dG9tOiAxOHB4O1xuICBib3JkZXI6IGdyb292ZTtcbiAgcGFkZGluZzogMTBweCAxNnB4IDEwcHggMTZweDtcbiAgY29sb3I6IHJnYmEodmFyKC0tZjUyLCAxNTMsIDE1MywgMTUzKSwgMSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWI2YSwgMjE5LCAyMTksIDIxOSksIDEpO1xuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCBSb2JvdG8sIEhlbHZldGljYSxcbiAgICBBcmlhbCwgc2Fucy1zZXJpZjtcbmA7XG5cbmNvbnN0IGZyaWVuZHMgPSBjc3NgXG4gIG1pbi1oZWlnaHQ6IDEwMHB4O1xuICBoZWlnaHQ6IGF1dG87XG4gIHdpZHRoOiAyNTlweDtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgYm9yZGVyOiBncm9vdmU7XG4gIHBhZGRpbmc6IDEycHggMTZweCAwcHggMTZweDtcbiAgY29sb3I6IHJnYmEodmFyKC0tZjUyLCAxNTMsIDE1MywgMTUzKSwgMSk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWI2YSwgMjE5LCAyMTksIDIxOSksIDEpO1xuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCBSb2JvdG8sIEhlbHZldGljYSxcbiAgICBBcmlhbCwgc2Fucy1zZXJpZjtcbmA7XG5cbmNvbnN0IG5hbWUgPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBjb2xvcjogYmxhY2s7XG5gO1xuXG5jb25zdCBuYW1lQW5kUGljdHVyZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgcGFkZGluZy1sZWZ0OiA1cHg7XG5gO1xuY29uc3QgZ3JpZEJveEZvclVzZXIgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1hcmdpbi10b3A6IDkwcHg7XG4gIG1hcmdpbi1sZWZ0OiAzMHB4O1xuYDtcblxuY29uc3QgYm9yZGVyUmFkaXVzID0gY3NzYFxuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGdyaWQtY29sdW1uLXN0YXJ0OiAyO1xuYDtcblxuY29uc3QgbG9jYXRpb24zMyA9IGNzc2BcbiAgZ3JpZC1yb3ctc3RhcnQ6IDM7XG4gIGdyaWQtY29sdW1uLXN0YXJ0OiAzO1xuYDtcblxuY29uc3QgbG9jYXRpb24yMyA9IGNzc2BcbiAgZ3JpZC1yb3ctc3RhcnQ6IDE7XG4gIGdyaWQtY29sdW1uLXN0YXJ0OiAzO1xuICBmb250LXNpemU6IHh4LWxhcmdlO1xuYDtcblxuY29uc3QgbG9jYXRpb240MyA9IGNzc2BcbiAgZ3JpZC1yb3ctc3RhcnQ6IDM7XG4gIGdyaWQtY29sdW1uLXN0YXJ0OiA0O1xuYDtcblxuLy8gVXNlckluZm9IZWFkLnByb3BUeXBlcyA9IHtcbi8vICAgdXNlck9mQWN0aXZlUGFnZTogUHJvcFR5cGVzLnN0cmluZ1xuLy8gfTtcblxuLy8gVXNlckluZm9IZWFkLmRlZmF1bHRQcm9wcyA9IHtcbi8vICAgdXNlck9mQWN0aXZlUGFnZTogXCJcIlxuLy8gfTtcblxuZXhwb3J0IGRlZmF1bHQgVXNlckluZm87XG4iXX0= */",
            "toString": [Function],
          }
        }
      >
        <div
          className="css-1jv803l-fix-UserInfo"
        >
          <EmotionCssPropInternal
            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
            css={
              Object {
                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "name": "1ebetuv-nameAndPicture-UserInfo",
                "next": undefined,
                "styles": "display:flex;align-items:center;margin-bottom:18px;padding-left:5px;;label:nameAndPicture;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "toString": [Function],
              }
            }
          >
            <div
              className="css-1ebetuv-nameAndPicture-UserInfo"
            >
              <EmotionCssPropInternal
                __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="img"
                alt="Smiley face"
                css={
                  Object {
                    "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                    "name": "1vc7bjq-borderRadius-UserInfo",
                    "next": undefined,
                    "styles": "border-radius:50%;grid-column-start:2;;label:borderRadius;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                    "toString": [Function],
                  }
                }
                height="50"
                width="50"
              >
                <img
                  alt="Smiley face"
                  className="css-1vc7bjq-borderRadius-UserInfo"
                  height="50"
                  width="50"
                />
              </EmotionCssPropInternal>
              <EmotionCssPropInternal
                __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                css={
                  Object {
                    "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                    "name": "ghyudx-name-UserInfo",
                    "next": undefined,
                    "styles": "margin-left:12px;color:black;;label:name;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                    "toString": [Function],
                  }
                }
              >
                <span
                  className="css-ghyudx-name-UserInfo"
                >
                  gibong
                </span>
              </EmotionCssPropInternal>
            </div>
          </EmotionCssPropInternal>
          <EmotionCssPropInternal
            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
            css={
              Object {
                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "name": "8m5q3g-story-UserInfo",
                "next": undefined,
                "styles": "font-weight:500;display:flex;flex-direction:column;width:259px;margin-bottom:18px;border:groove;padding:10px 16px 10px 16px;color:rgba(var(--f52,153,153,153),1);background-color:white;border:1px solid rgba(var(--b6a,219,219,219),1);font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Helvetica,Arial,sans-serif;;label:story;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "toString": [Function],
              }
            }
          >
            <span
              className="css-8m5q3g-story-UserInfo"
            >
              스토리
              <span
                style={
                  Object {
                    "fontWeight": 350,
                    "marginBottom": "4px",
                    "marginTop": "10px",
                  }
                }
              >
                회원님이 팔로우하는 사람들의 스토리가 여기에 표시 안됩니다.
              </span>
            </span>
          </EmotionCssPropInternal>
          <EmotionCssPropInternal
            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
            css={
              Object {
                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "name": "qj8stp-friends-UserInfo",
                "next": undefined,
                "styles": "min-height:100px;height:auto;width:259px;margin-bottom:18px;border:groove;padding:12px 16px 0px 16px;color:rgba(var(--f52,153,153,153),1);background-color:white;border:1px solid rgba(var(--b6a,219,219,219),1);font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Helvetica,Arial,sans-serif;;label:friends;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "toString": [Function],
              }
            }
          >
            <div
              className="css-qj8stp-friends-UserInfo"
            >
              <EmotionCssPropInternal
                __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                css={
                  Object {
                    "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                    "name": "11rqrlh-friendsTitle-UserInfo",
                    "next": undefined,
                    "styles": "font-weight:500;;label:friendsTitle;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                    "toString": [Function],
                  }
                }
              >
                <span
                  className="css-11rqrlh-friendsTitle-UserInfo"
                >
                  회원님을 위한 추천
                </span>
              </EmotionCssPropInternal>
              <EmotionCssPropInternal
                __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                css={
                  Object {
                    "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                    "name": "en2t3u-friendsImagesAndNames-UserInfo",
                    "next": undefined,
                    "styles": "flex-direction:column;display:flex;margin-top:16px;;label:friendsImagesAndNames;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                    "toString": [Function],
                  }
                }
              >
                <div
                  className="css-en2t3u-friendsImagesAndNames-UserInfo"
                >
                  <EmotionCssPropInternal
                    __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                    css={
                      Object {
                        "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                        "name": "1mwxaza-friendImageAndName-UserInfo",
                        "next": undefined,
                        "styles": "display:flex;align-items:center;margin-bottom:16px;position:relative;;label:friendImageAndName;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                        "toString": [Function],
                      }
                    }
                  >
                    <div
                      className="css-1mwxaza-friendImageAndName-UserInfo"
                    >
                      <EmotionCssPropInternal
                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="img"
                        alt="Smiley face"
                        css={
                          Object {
                            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                            "name": "1bg2sz4-borderRadius-UserInfo",
                            "next": undefined,
                            "styles": "border-radius:50%;grid-column-start:2;;label:borderRadius;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                            "toString": [Function],
                          }
                        }
                        height="40"
                        width="40"
                      >
                        <img
                          alt="Smiley face"
                          className="css-1bg2sz4-borderRadius-UserInfo"
                          height="40"
                          width="40"
                        />
                      </EmotionCssPropInternal>
                      <EmotionCssPropInternal
                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                        css={
                          Object {
                            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                            "name": "12vyxyu-textBoxForfriendImageAndName",
                            "styles": "display:flex;flex-direction:column;;label:textBoxForfriendImageAndName;",
                            "toString": [Function],
                          }
                        }
                      >
                        <div
                          className="css-12vyxyu-textBoxForfriendImageAndName"
                        >
                          <EmotionCssPropInternal
                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                            css={
                              Object {
                                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                "name": "noia1h-name-UserInfo",
                                "next": undefined,
                                "styles": "margin-left:12px;color:black;;label:name;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                "toString": [Function],
                              }
                            }
                          >
                            <span
                              className="css-noia1h-name-UserInfo"
                            >
                              Test
                            </span>
                          </EmotionCssPropInternal>
                          <EmotionCssPropInternal
                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                            css={
                              Object {
                                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXJJbmZvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFMMEIiLCJmaWxlIjoiVXNlckluZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCB7IGdldFVzZXJJbmZvQVBJIH0gZnJvbSAnLi4vYXBpcy9wb3N0JztcbmltcG9ydCB7IGdldFJhbmRvbVVzZXIsIEFkZEZvbGxvd2VyIH0gZnJvbSAnLi4vYXBpcy9UaW1lTGluZVBhZ2VBcGlzJztcblxuZnVuY3Rpb24gVXNlckluZm8oeyB1c2VyIH0pIHtcbiAgY29uc3QgW2luZm8sIHNldEluZm9dID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcmFuZG9tVXNlcnMsIHNldFJhbmRvbVVzZXJzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgdXNlckluZm8gPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0VXNlckluZm9BUEkodXNlcik7XG4gICAgICBzZXRJbmZvKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2FsbFJhbmRvbVVzZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UmFuZG9tVXNlcih1c2VyKTtcbiAgICAgIHNldFJhbmRvbVVzZXJzKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkQ2xpY2tlZEZvbGxvd2VyID0gYXN5bmMgbmFtZSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQWRkRm9sbG93ZXIobmFtZSk7XG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnc3VjY2VzcycsXG4gICAgICAgIHRpdGxlOiAnRm9sbG93aW5nJ1xuICAgICAgICAvLyB0ZXh0OiBcIkhvXCJcbiAgICAgIH0pO1xuICAgICAgY2FsbFJhbmRvbVVzZXIoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB1c2VySW5mbygpO1xuICAgIGNhbGxSYW5kb21Vc2VyKCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjc3M9e1tncmlkQm94Rm9yVXNlcl19PlxuICAgICAgICA8ZGl2IGNzcz17W2ZpeF19PlxuICAgICAgICAgIDxkaXYgY3NzPXtbbmFtZUFuZFBpY3R1cmVdfT5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgIGFsdD1cIlNtaWxleSBmYWNlXCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiNTBcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjUwXCJcbiAgICAgICAgICAgICAgY3NzPXtbYm9yZGVyUmFkaXVzXX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+e3VzZXIuc3Vic3RyaW5nKDAsIHVzZXIuaW5kZXhPZignQCcpKX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPHNwYW4gY3NzPXtbc3RvcnldfT5cbiAgICAgICAgICAgIOyKpO2GoOumrFxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICcxMHB4JyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICc0cHgnLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDM1MFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICDtmozsm5Dri5jsnbQg7YyU66Gc7Jqw7ZWY64qUIOyCrOuejOuTpOydmCDsiqTthqDrpqzqsIAg7Jes6riw7JeQIO2RnOyLnCDslYjrkKnri4jri6QuXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kc119PlxuICAgICAgICAgICAgPHNwYW4gY3NzPXtbZnJpZW5kc1RpdGxlXX0+7ZqM7JuQ64uY7J2EIOychO2VnCDstpTsspw8L3NwYW4+XG5cbiAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kc0ltYWdlc0FuZE5hbWVzXX0+XG4gICAgICAgICAgICAgIHtyYW5kb21Vc2Vycy5tYXAoKHVzZXJhLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgPGRpdiBrZXk9e2ByYW5kb21Vc2VyJHtpfWB9PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e1tmcmllbmRJbWFnZUFuZE5hbWVdfT5cbiAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgIHNyYz17dXNlcmEudXNlclVSTH1cbiAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDBcIlxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt0ZXh0Qm94Rm9yZnJpZW5kSW1hZ2VBbmROYW1lfT5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dXNlcmEubmFtZS5zdWJzdHJpbmcoMCwgdXNlcmEubmFtZS5pbmRleE9mKCdAJykpfVxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17W2ZvbGxvd0J1dHRvbl19XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYWRkQ2xpY2tlZEZvbGxvd2VyKHVzZXJhLm5hbWUpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgICAgICAgICAgICDtjJTroZzsmrB7JyAnfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIHsvKiB0ZXN0ICovfVxuICAgICAgICAgICAgICA8ZGl2IGNzcz17W2ZyaWVuZEltYWdlQW5kTmFtZV19PlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17aW5mby51c2VyVVJMfVxuICAgICAgICAgICAgICAgICAgYWx0PVwiU21pbGV5IGZhY2VcIlxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MFwiXG4gICAgICAgICAgICAgICAgICBjc3M9e1tib3JkZXJSYWRpdXNdfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjc3M9e3RleHRCb3hGb3JmcmllbmRJbWFnZUFuZE5hbWV9PlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbbmFtZV19PlRlc3Q8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbZm9sbG93QnV0dG9uXX0+IO2MlOuhnOyasCA8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kSW1hZ2VBbmROYW1lXX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI0MFwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNzcz17dGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZX0+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+VGVzdDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W3JlY29tbWVuZGF0aW9uXX0+cmVjb21tZW5kYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tmb2xsb3dCdXR0b25dfT4g7YyU66Gc7JqwIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgey8qIHRlc3QgKi99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNzcz17W2R1bm5vVGV4dF19PlxuICAgICAgICAgICAg7IaM6rCcLeuPhOybgOunkC3tmY3rs7TshLzthLAtQVBJLeyxhOyaqeygleuztC3qsJzsnbjsoJXrs7TsspjrpqzrsKnsuagt7JW96rSALeychOy5mC3snbjquLDqs4TsoJUt7ZW07Iuc7YOc6re4LeyWuOyWtFxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY3NzPXtbZHVubm9UZXh0XX0+wqkgMjAyMCBCT05HU1RBR1JBTTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuXG5jb25zdCBmaXggPSBjc3NgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbmA7XG5cbmNvbnN0IGR1bm5vVGV4dCA9IGNzc2BcbiAgY29sb3I6ICNjN2M3Yzc7XG4gIG1heC13aWR0aDogMjkzcHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbmA7XG5cbmNvbnN0IGZvbGxvd0J1dHRvbiA9IGNzc2BcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMDtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgY29sb3I6ICMyMTk2ZjM7XG5gO1xuY29uc3QgcmVjb21tZW5kYXRpb24gPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuY29uc3QgdGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmA7XG5cbmNvbnN0IGZyaWVuZEltYWdlQW5kTmFtZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgZnJpZW5kc0ltYWdlc0FuZE5hbWVzID0gY3NzYFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBkaXNwbGF5OiBmbGV4O1xuICBtYXJnaW4tdG9wOiAxNnB4O1xuYDtcblxuY29uc3QgZnJpZW5kc1RpdGxlID0gY3NzYFxuICBmb250LXdlaWdodDogNTAwO1xuYDtcblxuY29uc3Qgc3RvcnkgPSBjc3NgXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHdpZHRoOiAyNTlweDtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgYm9yZGVyOiBncm9vdmU7XG4gIHBhZGRpbmc6IDEwcHggMTZweCAxMHB4IDE2cHg7XG4gIGNvbG9yOiByZ2JhKHZhcigtLWY1MiwgMTUzLCAxNTMsIDE1MyksIDEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1iNmEsIDIxOSwgMjE5LCAyMTkpLCAxKTtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsXG4gICAgQXJpYWwsIHNhbnMtc2VyaWY7XG5gO1xuXG5jb25zdCBmcmllbmRzID0gY3NzYFxuICBtaW4taGVpZ2h0OiAxMDBweDtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogMjU5cHg7XG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG4gIGJvcmRlcjogZ3Jvb3ZlO1xuICBwYWRkaW5nOiAxMnB4IDE2cHggMHB4IDE2cHg7XG4gIGNvbG9yOiByZ2JhKHZhcigtLWY1MiwgMTUzLCAxNTMsIDE1MyksIDEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1iNmEsIDIxOSwgMjE5LCAyMTkpLCAxKTtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsXG4gICAgQXJpYWwsIHNhbnMtc2VyaWY7XG5gO1xuXG5jb25zdCBuYW1lID0gY3NzYFxuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgY29sb3I6IGJsYWNrO1xuYDtcblxuY29uc3QgbmFtZUFuZFBpY3R1cmUgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG4gIHBhZGRpbmctbGVmdDogNXB4O1xuYDtcbmNvbnN0IGdyaWRCb3hGb3JVc2VyID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tdG9wOiA5MHB4O1xuICBtYXJnaW4tbGVmdDogMzBweDtcbmA7XG5cbmNvbnN0IGJvcmRlclJhZGl1cyA9IGNzc2BcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBncmlkLWNvbHVtbi1zdGFydDogMjtcbmA7XG5cbmNvbnN0IGxvY2F0aW9uMzMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAzO1xuICBncmlkLWNvbHVtbi1zdGFydDogMztcbmA7XG5cbmNvbnN0IGxvY2F0aW9uMjMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAxO1xuICBncmlkLWNvbHVtbi1zdGFydDogMztcbiAgZm9udC1zaXplOiB4eC1sYXJnZTtcbmA7XG5cbmNvbnN0IGxvY2F0aW9uNDMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAzO1xuICBncmlkLWNvbHVtbi1zdGFydDogNDtcbmA7XG5cbi8vIFVzZXJJbmZvSGVhZC5wcm9wVHlwZXMgPSB7XG4vLyAgIHVzZXJPZkFjdGl2ZVBhZ2U6IFByb3BUeXBlcy5zdHJpbmdcbi8vIH07XG5cbi8vIFVzZXJJbmZvSGVhZC5kZWZhdWx0UHJvcHMgPSB7XG4vLyAgIHVzZXJPZkFjdGl2ZVBhZ2U6IFwiXCJcbi8vIH07XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJJbmZvO1xuIl19 */",
                                "name": "c3f9my-recommendation-UserInfo",
                                "next": undefined,
                                "styles": "margin-left:12px;font-size:14px;;label:recommendation;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                "toString": [Function],
                              }
                            }
                          >
                            <span
                              className="css-c3f9my-recommendation-UserInfo"
                            >
                              recommendation
                            </span>
                          </EmotionCssPropInternal>
                        </div>
                      </EmotionCssPropInternal>
                      <EmotionCssPropInternal
                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                        css={
                          Object {
                            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                            "name": "10ukt69-followButton-UserInfo",
                            "next": undefined,
                            "styles": "position:absolute;right:0;top:50%;transform:translateY(-50%);color:#2196f3;;label:followButton;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                            "toString": [Function],
                          }
                        }
                      >
                        <span
                          className="css-10ukt69-followButton-UserInfo"
                        >
                           팔로우 
                        </span>
                      </EmotionCssPropInternal>
                    </div>
                  </EmotionCssPropInternal>
                  <EmotionCssPropInternal
                    __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                    css={
                      Object {
                        "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                        "name": "12oxtw-friendImageAndName-UserInfo",
                        "next": undefined,
                        "styles": "display:flex;align-items:center;margin-bottom:16px;position:relative;;label:friendImageAndName;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                        "toString": [Function],
                      }
                    }
                  >
                    <div
                      className="css-12oxtw-friendImageAndName-UserInfo"
                    >
                      <EmotionCssPropInternal
                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="img"
                        alt="Smiley face"
                        css={
                          Object {
                            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXJJbmZvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThQd0IiLCJmaWxlIjoiVXNlckluZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCB7IGdldFVzZXJJbmZvQVBJIH0gZnJvbSAnLi4vYXBpcy9wb3N0JztcbmltcG9ydCB7IGdldFJhbmRvbVVzZXIsIEFkZEZvbGxvd2VyIH0gZnJvbSAnLi4vYXBpcy9UaW1lTGluZVBhZ2VBcGlzJztcblxuZnVuY3Rpb24gVXNlckluZm8oeyB1c2VyIH0pIHtcbiAgY29uc3QgW2luZm8sIHNldEluZm9dID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcmFuZG9tVXNlcnMsIHNldFJhbmRvbVVzZXJzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgdXNlckluZm8gPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0VXNlckluZm9BUEkodXNlcik7XG4gICAgICBzZXRJbmZvKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2FsbFJhbmRvbVVzZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UmFuZG9tVXNlcih1c2VyKTtcbiAgICAgIHNldFJhbmRvbVVzZXJzKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkQ2xpY2tlZEZvbGxvd2VyID0gYXN5bmMgbmFtZSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQWRkRm9sbG93ZXIobmFtZSk7XG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnc3VjY2VzcycsXG4gICAgICAgIHRpdGxlOiAnRm9sbG93aW5nJ1xuICAgICAgICAvLyB0ZXh0OiBcIkhvXCJcbiAgICAgIH0pO1xuICAgICAgY2FsbFJhbmRvbVVzZXIoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB1c2VySW5mbygpO1xuICAgIGNhbGxSYW5kb21Vc2VyKCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjc3M9e1tncmlkQm94Rm9yVXNlcl19PlxuICAgICAgICA8ZGl2IGNzcz17W2ZpeF19PlxuICAgICAgICAgIDxkaXYgY3NzPXtbbmFtZUFuZFBpY3R1cmVdfT5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgIGFsdD1cIlNtaWxleSBmYWNlXCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiNTBcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjUwXCJcbiAgICAgICAgICAgICAgY3NzPXtbYm9yZGVyUmFkaXVzXX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+e3VzZXIuc3Vic3RyaW5nKDAsIHVzZXIuaW5kZXhPZignQCcpKX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPHNwYW4gY3NzPXtbc3RvcnldfT5cbiAgICAgICAgICAgIOyKpO2GoOumrFxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICcxMHB4JyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICc0cHgnLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDM1MFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICDtmozsm5Dri5jsnbQg7YyU66Gc7Jqw7ZWY64qUIOyCrOuejOuTpOydmCDsiqTthqDrpqzqsIAg7Jes6riw7JeQIO2RnOyLnCDslYjrkKnri4jri6QuXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kc119PlxuICAgICAgICAgICAgPHNwYW4gY3NzPXtbZnJpZW5kc1RpdGxlXX0+7ZqM7JuQ64uY7J2EIOychO2VnCDstpTsspw8L3NwYW4+XG5cbiAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kc0ltYWdlc0FuZE5hbWVzXX0+XG4gICAgICAgICAgICAgIHtyYW5kb21Vc2Vycy5tYXAoKHVzZXJhLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgPGRpdiBrZXk9e2ByYW5kb21Vc2VyJHtpfWB9PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e1tmcmllbmRJbWFnZUFuZE5hbWVdfT5cbiAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgIHNyYz17dXNlcmEudXNlclVSTH1cbiAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDBcIlxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt0ZXh0Qm94Rm9yZnJpZW5kSW1hZ2VBbmROYW1lfT5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dXNlcmEubmFtZS5zdWJzdHJpbmcoMCwgdXNlcmEubmFtZS5pbmRleE9mKCdAJykpfVxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17W2ZvbGxvd0J1dHRvbl19XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYWRkQ2xpY2tlZEZvbGxvd2VyKHVzZXJhLm5hbWUpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgICAgICAgICAgICDtjJTroZzsmrB7JyAnfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIHsvKiB0ZXN0ICovfVxuICAgICAgICAgICAgICA8ZGl2IGNzcz17W2ZyaWVuZEltYWdlQW5kTmFtZV19PlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17aW5mby51c2VyVVJMfVxuICAgICAgICAgICAgICAgICAgYWx0PVwiU21pbGV5IGZhY2VcIlxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MFwiXG4gICAgICAgICAgICAgICAgICBjc3M9e1tib3JkZXJSYWRpdXNdfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjc3M9e3RleHRCb3hGb3JmcmllbmRJbWFnZUFuZE5hbWV9PlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbbmFtZV19PlRlc3Q8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbZm9sbG93QnV0dG9uXX0+IO2MlOuhnOyasCA8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kSW1hZ2VBbmROYW1lXX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI0MFwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNzcz17dGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZX0+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+VGVzdDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W3JlY29tbWVuZGF0aW9uXX0+cmVjb21tZW5kYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tmb2xsb3dCdXR0b25dfT4g7YyU66Gc7JqwIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgey8qIHRlc3QgKi99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNzcz17W2R1bm5vVGV4dF19PlxuICAgICAgICAgICAg7IaM6rCcLeuPhOybgOunkC3tmY3rs7TshLzthLAtQVBJLeyxhOyaqeygleuztC3qsJzsnbjsoJXrs7TsspjrpqzrsKnsuagt7JW96rSALeychOy5mC3snbjquLDqs4TsoJUt7ZW07Iuc7YOc6re4LeyWuOyWtFxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY3NzPXtbZHVubm9UZXh0XX0+wqkgMjAyMCBCT05HU1RBR1JBTTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuXG5jb25zdCBmaXggPSBjc3NgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbmA7XG5cbmNvbnN0IGR1bm5vVGV4dCA9IGNzc2BcbiAgY29sb3I6ICNjN2M3Yzc7XG4gIG1heC13aWR0aDogMjkzcHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbmA7XG5cbmNvbnN0IGZvbGxvd0J1dHRvbiA9IGNzc2BcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMDtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgY29sb3I6ICMyMTk2ZjM7XG5gO1xuY29uc3QgcmVjb21tZW5kYXRpb24gPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuY29uc3QgdGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmA7XG5cbmNvbnN0IGZyaWVuZEltYWdlQW5kTmFtZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgZnJpZW5kc0ltYWdlc0FuZE5hbWVzID0gY3NzYFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBkaXNwbGF5OiBmbGV4O1xuICBtYXJnaW4tdG9wOiAxNnB4O1xuYDtcblxuY29uc3QgZnJpZW5kc1RpdGxlID0gY3NzYFxuICBmb250LXdlaWdodDogNTAwO1xuYDtcblxuY29uc3Qgc3RvcnkgPSBjc3NgXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHdpZHRoOiAyNTlweDtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgYm9yZGVyOiBncm9vdmU7XG4gIHBhZGRpbmc6IDEwcHggMTZweCAxMHB4IDE2cHg7XG4gIGNvbG9yOiByZ2JhKHZhcigtLWY1MiwgMTUzLCAxNTMsIDE1MyksIDEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1iNmEsIDIxOSwgMjE5LCAyMTkpLCAxKTtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsXG4gICAgQXJpYWwsIHNhbnMtc2VyaWY7XG5gO1xuXG5jb25zdCBmcmllbmRzID0gY3NzYFxuICBtaW4taGVpZ2h0OiAxMDBweDtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogMjU5cHg7XG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG4gIGJvcmRlcjogZ3Jvb3ZlO1xuICBwYWRkaW5nOiAxMnB4IDE2cHggMHB4IDE2cHg7XG4gIGNvbG9yOiByZ2JhKHZhcigtLWY1MiwgMTUzLCAxNTMsIDE1MyksIDEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1iNmEsIDIxOSwgMjE5LCAyMTkpLCAxKTtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsXG4gICAgQXJpYWwsIHNhbnMtc2VyaWY7XG5gO1xuXG5jb25zdCBuYW1lID0gY3NzYFxuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgY29sb3I6IGJsYWNrO1xuYDtcblxuY29uc3QgbmFtZUFuZFBpY3R1cmUgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG4gIHBhZGRpbmctbGVmdDogNXB4O1xuYDtcbmNvbnN0IGdyaWRCb3hGb3JVc2VyID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tdG9wOiA5MHB4O1xuICBtYXJnaW4tbGVmdDogMzBweDtcbmA7XG5cbmNvbnN0IGJvcmRlclJhZGl1cyA9IGNzc2BcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBncmlkLWNvbHVtbi1zdGFydDogMjtcbmA7XG5cbmNvbnN0IGxvY2F0aW9uMzMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAzO1xuICBncmlkLWNvbHVtbi1zdGFydDogMztcbmA7XG5cbmNvbnN0IGxvY2F0aW9uMjMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAxO1xuICBncmlkLWNvbHVtbi1zdGFydDogMztcbiAgZm9udC1zaXplOiB4eC1sYXJnZTtcbmA7XG5cbmNvbnN0IGxvY2F0aW9uNDMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAzO1xuICBncmlkLWNvbHVtbi1zdGFydDogNDtcbmA7XG5cbi8vIFVzZXJJbmZvSGVhZC5wcm9wVHlwZXMgPSB7XG4vLyAgIHVzZXJPZkFjdGl2ZVBhZ2U6IFByb3BUeXBlcy5zdHJpbmdcbi8vIH07XG5cbi8vIFVzZXJJbmZvSGVhZC5kZWZhdWx0UHJvcHMgPSB7XG4vLyAgIHVzZXJPZkFjdGl2ZVBhZ2U6IFwiXCJcbi8vIH07XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJJbmZvO1xuIl19 */",
                            "name": "19kh9wg-borderRadius-UserInfo",
                            "next": undefined,
                            "styles": "border-radius:50%;grid-column-start:2;;label:borderRadius;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXJJbmZvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRJa0IiLCJmaWxlIjoiVXNlckluZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCB7IGdldFVzZXJJbmZvQVBJIH0gZnJvbSAnLi4vYXBpcy9wb3N0JztcbmltcG9ydCB7IGdldFJhbmRvbVVzZXIsIEFkZEZvbGxvd2VyIH0gZnJvbSAnLi4vYXBpcy9UaW1lTGluZVBhZ2VBcGlzJztcblxuZnVuY3Rpb24gVXNlckluZm8oeyB1c2VyIH0pIHtcbiAgY29uc3QgW2luZm8sIHNldEluZm9dID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcmFuZG9tVXNlcnMsIHNldFJhbmRvbVVzZXJzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgdXNlckluZm8gPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0VXNlckluZm9BUEkodXNlcik7XG4gICAgICBzZXRJbmZvKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2FsbFJhbmRvbVVzZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UmFuZG9tVXNlcih1c2VyKTtcbiAgICAgIHNldFJhbmRvbVVzZXJzKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkQ2xpY2tlZEZvbGxvd2VyID0gYXN5bmMgbmFtZSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQWRkRm9sbG93ZXIobmFtZSk7XG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnc3VjY2VzcycsXG4gICAgICAgIHRpdGxlOiAnRm9sbG93aW5nJ1xuICAgICAgICAvLyB0ZXh0OiBcIkhvXCJcbiAgICAgIH0pO1xuICAgICAgY2FsbFJhbmRvbVVzZXIoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB1c2VySW5mbygpO1xuICAgIGNhbGxSYW5kb21Vc2VyKCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjc3M9e1tncmlkQm94Rm9yVXNlcl19PlxuICAgICAgICA8ZGl2IGNzcz17W2ZpeF19PlxuICAgICAgICAgIDxkaXYgY3NzPXtbbmFtZUFuZFBpY3R1cmVdfT5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgIGFsdD1cIlNtaWxleSBmYWNlXCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiNTBcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjUwXCJcbiAgICAgICAgICAgICAgY3NzPXtbYm9yZGVyUmFkaXVzXX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+e3VzZXIuc3Vic3RyaW5nKDAsIHVzZXIuaW5kZXhPZignQCcpKX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPHNwYW4gY3NzPXtbc3RvcnldfT5cbiAgICAgICAgICAgIOyKpO2GoOumrFxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICcxMHB4JyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICc0cHgnLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDM1MFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICDtmozsm5Dri5jsnbQg7YyU66Gc7Jqw7ZWY64qUIOyCrOuejOuTpOydmCDsiqTthqDrpqzqsIAg7Jes6riw7JeQIO2RnOyLnCDslYjrkKnri4jri6QuXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kc119PlxuICAgICAgICAgICAgPHNwYW4gY3NzPXtbZnJpZW5kc1RpdGxlXX0+7ZqM7JuQ64uY7J2EIOychO2VnCDstpTsspw8L3NwYW4+XG5cbiAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kc0ltYWdlc0FuZE5hbWVzXX0+XG4gICAgICAgICAgICAgIHtyYW5kb21Vc2Vycy5tYXAoKHVzZXJhLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgPGRpdiBrZXk9e2ByYW5kb21Vc2VyJHtpfWB9PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e1tmcmllbmRJbWFnZUFuZE5hbWVdfT5cbiAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgIHNyYz17dXNlcmEudXNlclVSTH1cbiAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDBcIlxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt0ZXh0Qm94Rm9yZnJpZW5kSW1hZ2VBbmROYW1lfT5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dXNlcmEubmFtZS5zdWJzdHJpbmcoMCwgdXNlcmEubmFtZS5pbmRleE9mKCdAJykpfVxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17W2ZvbGxvd0J1dHRvbl19XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYWRkQ2xpY2tlZEZvbGxvd2VyKHVzZXJhLm5hbWUpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgICAgICAgICAgICDtjJTroZzsmrB7JyAnfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIHsvKiB0ZXN0ICovfVxuICAgICAgICAgICAgICA8ZGl2IGNzcz17W2ZyaWVuZEltYWdlQW5kTmFtZV19PlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17aW5mby51c2VyVVJMfVxuICAgICAgICAgICAgICAgICAgYWx0PVwiU21pbGV5IGZhY2VcIlxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MFwiXG4gICAgICAgICAgICAgICAgICBjc3M9e1tib3JkZXJSYWRpdXNdfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjc3M9e3RleHRCb3hGb3JmcmllbmRJbWFnZUFuZE5hbWV9PlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbbmFtZV19PlRlc3Q8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbZm9sbG93QnV0dG9uXX0+IO2MlOuhnOyasCA8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kSW1hZ2VBbmROYW1lXX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI0MFwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNzcz17dGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZX0+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+VGVzdDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W3JlY29tbWVuZGF0aW9uXX0+cmVjb21tZW5kYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tmb2xsb3dCdXR0b25dfT4g7YyU66Gc7JqwIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgey8qIHRlc3QgKi99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNzcz17W2R1bm5vVGV4dF19PlxuICAgICAgICAgICAg7IaM6rCcLeuPhOybgOunkC3tmY3rs7TshLzthLAtQVBJLeyxhOyaqeygleuztC3qsJzsnbjsoJXrs7TsspjrpqzrsKnsuagt7JW96rSALeychOy5mC3snbjquLDqs4TsoJUt7ZW07Iuc7YOc6re4LeyWuOyWtFxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY3NzPXtbZHVubm9UZXh0XX0+wqkgMjAyMCBCT05HU1RBR1JBTTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuXG5jb25zdCBmaXggPSBjc3NgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbmA7XG5cbmNvbnN0IGR1bm5vVGV4dCA9IGNzc2BcbiAgY29sb3I6ICNjN2M3Yzc7XG4gIG1heC13aWR0aDogMjkzcHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbmA7XG5cbmNvbnN0IGZvbGxvd0J1dHRvbiA9IGNzc2BcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMDtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgY29sb3I6ICMyMTk2ZjM7XG5gO1xuY29uc3QgcmVjb21tZW5kYXRpb24gPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuY29uc3QgdGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmA7XG5cbmNvbnN0IGZyaWVuZEltYWdlQW5kTmFtZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgZnJpZW5kc0ltYWdlc0FuZE5hbWVzID0gY3NzYFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBkaXNwbGF5OiBmbGV4O1xuICBtYXJnaW4tdG9wOiAxNnB4O1xuYDtcblxuY29uc3QgZnJpZW5kc1RpdGxlID0gY3NzYFxuICBmb250LXdlaWdodDogNTAwO1xuYDtcblxuY29uc3Qgc3RvcnkgPSBjc3NgXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHdpZHRoOiAyNTlweDtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgYm9yZGVyOiBncm9vdmU7XG4gIHBhZGRpbmc6IDEwcHggMTZweCAxMHB4IDE2cHg7XG4gIGNvbG9yOiByZ2JhKHZhcigtLWY1MiwgMTUzLCAxNTMsIDE1MyksIDEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1iNmEsIDIxOSwgMjE5LCAyMTkpLCAxKTtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsXG4gICAgQXJpYWwsIHNhbnMtc2VyaWY7XG5gO1xuXG5jb25zdCBmcmllbmRzID0gY3NzYFxuICBtaW4taGVpZ2h0OiAxMDBweDtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogMjU5cHg7XG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG4gIGJvcmRlcjogZ3Jvb3ZlO1xuICBwYWRkaW5nOiAxMnB4IDE2cHggMHB4IDE2cHg7XG4gIGNvbG9yOiByZ2JhKHZhcigtLWY1MiwgMTUzLCAxNTMsIDE1MyksIDEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1iNmEsIDIxOSwgMjE5LCAyMTkpLCAxKTtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsXG4gICAgQXJpYWwsIHNhbnMtc2VyaWY7XG5gO1xuXG5jb25zdCBuYW1lID0gY3NzYFxuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgY29sb3I6IGJsYWNrO1xuYDtcblxuY29uc3QgbmFtZUFuZFBpY3R1cmUgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG4gIHBhZGRpbmctbGVmdDogNXB4O1xuYDtcbmNvbnN0IGdyaWRCb3hGb3JVc2VyID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tdG9wOiA5MHB4O1xuICBtYXJnaW4tbGVmdDogMzBweDtcbmA7XG5cbmNvbnN0IGJvcmRlclJhZGl1cyA9IGNzc2BcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBncmlkLWNvbHVtbi1zdGFydDogMjtcbmA7XG5cbmNvbnN0IGxvY2F0aW9uMzMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAzO1xuICBncmlkLWNvbHVtbi1zdGFydDogMztcbmA7XG5cbmNvbnN0IGxvY2F0aW9uMjMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAxO1xuICBncmlkLWNvbHVtbi1zdGFydDogMztcbiAgZm9udC1zaXplOiB4eC1sYXJnZTtcbmA7XG5cbmNvbnN0IGxvY2F0aW9uNDMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAzO1xuICBncmlkLWNvbHVtbi1zdGFydDogNDtcbmA7XG5cbi8vIFVzZXJJbmZvSGVhZC5wcm9wVHlwZXMgPSB7XG4vLyAgIHVzZXJPZkFjdGl2ZVBhZ2U6IFByb3BUeXBlcy5zdHJpbmdcbi8vIH07XG5cbi8vIFVzZXJJbmZvSGVhZC5kZWZhdWx0UHJvcHMgPSB7XG4vLyAgIHVzZXJPZkFjdGl2ZVBhZ2U6IFwiXCJcbi8vIH07XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJJbmZvO1xuIl19 */",
                            "toString": [Function],
                          }
                        }
                        height="40"
                        width="40"
                      >
                        <img
                          alt="Smiley face"
                          className="css-19kh9wg-borderRadius-UserInfo"
                          height="40"
                          width="40"
                        />
                      </EmotionCssPropInternal>
                      <EmotionCssPropInternal
                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                        css={
                          Object {
                            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXJJbmZvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlMd0MiLCJmaWxlIjoiVXNlckluZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCB7IGdldFVzZXJJbmZvQVBJIH0gZnJvbSAnLi4vYXBpcy9wb3N0JztcbmltcG9ydCB7IGdldFJhbmRvbVVzZXIsIEFkZEZvbGxvd2VyIH0gZnJvbSAnLi4vYXBpcy9UaW1lTGluZVBhZ2VBcGlzJztcblxuZnVuY3Rpb24gVXNlckluZm8oeyB1c2VyIH0pIHtcbiAgY29uc3QgW2luZm8sIHNldEluZm9dID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcmFuZG9tVXNlcnMsIHNldFJhbmRvbVVzZXJzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgdXNlckluZm8gPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0VXNlckluZm9BUEkodXNlcik7XG4gICAgICBzZXRJbmZvKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2FsbFJhbmRvbVVzZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UmFuZG9tVXNlcih1c2VyKTtcbiAgICAgIHNldFJhbmRvbVVzZXJzKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkQ2xpY2tlZEZvbGxvd2VyID0gYXN5bmMgbmFtZSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQWRkRm9sbG93ZXIobmFtZSk7XG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnc3VjY2VzcycsXG4gICAgICAgIHRpdGxlOiAnRm9sbG93aW5nJ1xuICAgICAgICAvLyB0ZXh0OiBcIkhvXCJcbiAgICAgIH0pO1xuICAgICAgY2FsbFJhbmRvbVVzZXIoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBTd2FsLmZpcmUoe1xuICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICB0ZXh0OiAnSW50ZXJuYWwgRXJyb3InXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB1c2VySW5mbygpO1xuICAgIGNhbGxSYW5kb21Vc2VyKCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjc3M9e1tncmlkQm94Rm9yVXNlcl19PlxuICAgICAgICA8ZGl2IGNzcz17W2ZpeF19PlxuICAgICAgICAgIDxkaXYgY3NzPXtbbmFtZUFuZFBpY3R1cmVdfT5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgIGFsdD1cIlNtaWxleSBmYWNlXCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiNTBcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjUwXCJcbiAgICAgICAgICAgICAgY3NzPXtbYm9yZGVyUmFkaXVzXX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+e3VzZXIuc3Vic3RyaW5nKDAsIHVzZXIuaW5kZXhPZignQCcpKX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPHNwYW4gY3NzPXtbc3RvcnldfT5cbiAgICAgICAgICAgIOyKpO2GoOumrFxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICcxMHB4JyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206ICc0cHgnLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDM1MFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICDtmozsm5Dri5jsnbQg7YyU66Gc7Jqw7ZWY64qUIOyCrOuejOuTpOydmCDsiqTthqDrpqzqsIAg7Jes6riw7JeQIO2RnOyLnCDslYjrkKnri4jri6QuXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kc119PlxuICAgICAgICAgICAgPHNwYW4gY3NzPXtbZnJpZW5kc1RpdGxlXX0+7ZqM7JuQ64uY7J2EIOychO2VnCDstpTsspw8L3NwYW4+XG5cbiAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kc0ltYWdlc0FuZE5hbWVzXX0+XG4gICAgICAgICAgICAgIHtyYW5kb21Vc2Vycy5tYXAoKHVzZXJhLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgPGRpdiBrZXk9e2ByYW5kb21Vc2VyJHtpfWB9PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e1tmcmllbmRJbWFnZUFuZE5hbWVdfT5cbiAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgIHNyYz17dXNlcmEudXNlclVSTH1cbiAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDBcIlxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt0ZXh0Qm94Rm9yZnJpZW5kSW1hZ2VBbmROYW1lfT5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dXNlcmEubmFtZS5zdWJzdHJpbmcoMCwgdXNlcmEubmFtZS5pbmRleE9mKCdAJykpfVxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17W2ZvbGxvd0J1dHRvbl19XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYWRkQ2xpY2tlZEZvbGxvd2VyKHVzZXJhLm5hbWUpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgICAgICAgICAgICDtjJTroZzsmrB7JyAnfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIHsvKiB0ZXN0ICovfVxuICAgICAgICAgICAgICA8ZGl2IGNzcz17W2ZyaWVuZEltYWdlQW5kTmFtZV19PlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17aW5mby51c2VyVVJMfVxuICAgICAgICAgICAgICAgICAgYWx0PVwiU21pbGV5IGZhY2VcIlxuICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDBcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCI0MFwiXG4gICAgICAgICAgICAgICAgICBjc3M9e1tib3JkZXJSYWRpdXNdfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjc3M9e3RleHRCb3hGb3JmcmllbmRJbWFnZUFuZE5hbWV9PlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbbmFtZV19PlRlc3Q8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tyZWNvbW1lbmRhdGlvbl19PnJlY29tbWVuZGF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPHNwYW4gY3NzPXtbZm9sbG93QnV0dG9uXX0+IO2MlOuhnOyasCA8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDxkaXYgY3NzPXtbZnJpZW5kSW1hZ2VBbmROYW1lXX0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXtpbmZvLnVzZXJVUkx9XG4gICAgICAgICAgICAgICAgICBhbHQ9XCJTbWlsZXkgZmFjZVwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI0MFwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjQwXCJcbiAgICAgICAgICAgICAgICAgIGNzcz17W2JvcmRlclJhZGl1c119XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNzcz17dGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZX0+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tuYW1lXX0+VGVzdDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17W3JlY29tbWVuZGF0aW9uXX0+cmVjb21tZW5kYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e1tmb2xsb3dCdXR0b25dfT4g7YyU66Gc7JqwIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgey8qIHRlc3QgKi99XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNzcz17W2R1bm5vVGV4dF19PlxuICAgICAgICAgICAg7IaM6rCcLeuPhOybgOunkC3tmY3rs7TshLzthLAtQVBJLeyxhOyaqeygleuztC3qsJzsnbjsoJXrs7TsspjrpqzrsKnsuagt7JW96rSALeychOy5mC3snbjquLDqs4TsoJUt7ZW07Iuc7YOc6re4LeyWuOyWtFxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY3NzPXtbZHVubm9UZXh0XX0+wqkgMjAyMCBCT05HU1RBR1JBTTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuXG5jb25zdCBmaXggPSBjc3NgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbmA7XG5cbmNvbnN0IGR1bm5vVGV4dCA9IGNzc2BcbiAgY29sb3I6ICNjN2M3Yzc7XG4gIG1heC13aWR0aDogMjkzcHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbmA7XG5cbmNvbnN0IGZvbGxvd0J1dHRvbiA9IGNzc2BcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMDtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgY29sb3I6ICMyMTk2ZjM7XG5gO1xuY29uc3QgcmVjb21tZW5kYXRpb24gPSBjc3NgXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuY29uc3QgdGV4dEJveEZvcmZyaWVuZEltYWdlQW5kTmFtZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmA7XG5cbmNvbnN0IGZyaWVuZEltYWdlQW5kTmFtZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgZnJpZW5kc0ltYWdlc0FuZE5hbWVzID0gY3NzYFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBkaXNwbGF5OiBmbGV4O1xuICBtYXJnaW4tdG9wOiAxNnB4O1xuYDtcblxuY29uc3QgZnJpZW5kc1RpdGxlID0gY3NzYFxuICBmb250LXdlaWdodDogNTAwO1xuYDtcblxuY29uc3Qgc3RvcnkgPSBjc3NgXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHdpZHRoOiAyNTlweDtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgYm9yZGVyOiBncm9vdmU7XG4gIHBhZGRpbmc6IDEwcHggMTZweCAxMHB4IDE2cHg7XG4gIGNvbG9yOiByZ2JhKHZhcigtLWY1MiwgMTUzLCAxNTMsIDE1MyksIDEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1iNmEsIDIxOSwgMjE5LCAyMTkpLCAxKTtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsXG4gICAgQXJpYWwsIHNhbnMtc2VyaWY7XG5gO1xuXG5jb25zdCBmcmllbmRzID0gY3NzYFxuICBtaW4taGVpZ2h0OiAxMDBweDtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogMjU5cHg7XG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG4gIGJvcmRlcjogZ3Jvb3ZlO1xuICBwYWRkaW5nOiAxMnB4IDE2cHggMHB4IDE2cHg7XG4gIGNvbG9yOiByZ2JhKHZhcigtLWY1MiwgMTUzLCAxNTMsIDE1MyksIDEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1iNmEsIDIxOSwgMjE5LCAyMTkpLCAxKTtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBIZWx2ZXRpY2EsXG4gICAgQXJpYWwsIHNhbnMtc2VyaWY7XG5gO1xuXG5jb25zdCBuYW1lID0gY3NzYFxuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgY29sb3I6IGJsYWNrO1xuYDtcblxuY29uc3QgbmFtZUFuZFBpY3R1cmUgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG4gIHBhZGRpbmctbGVmdDogNXB4O1xuYDtcbmNvbnN0IGdyaWRCb3hGb3JVc2VyID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tdG9wOiA5MHB4O1xuICBtYXJnaW4tbGVmdDogMzBweDtcbmA7XG5cbmNvbnN0IGJvcmRlclJhZGl1cyA9IGNzc2BcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBncmlkLWNvbHVtbi1zdGFydDogMjtcbmA7XG5cbmNvbnN0IGxvY2F0aW9uMzMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAzO1xuICBncmlkLWNvbHVtbi1zdGFydDogMztcbmA7XG5cbmNvbnN0IGxvY2F0aW9uMjMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAxO1xuICBncmlkLWNvbHVtbi1zdGFydDogMztcbiAgZm9udC1zaXplOiB4eC1sYXJnZTtcbmA7XG5cbmNvbnN0IGxvY2F0aW9uNDMgPSBjc3NgXG4gIGdyaWQtcm93LXN0YXJ0OiAzO1xuICBncmlkLWNvbHVtbi1zdGFydDogNDtcbmA7XG5cbi8vIFVzZXJJbmZvSGVhZC5wcm9wVHlwZXMgPSB7XG4vLyAgIHVzZXJPZkFjdGl2ZVBhZ2U6IFByb3BUeXBlcy5zdHJpbmdcbi8vIH07XG5cbi8vIFVzZXJJbmZvSGVhZC5kZWZhdWx0UHJvcHMgPSB7XG4vLyAgIHVzZXJPZkFjdGl2ZVBhZ2U6IFwiXCJcbi8vIH07XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJJbmZvO1xuIl19 */",
                            "name": "12vyxyu-textBoxForfriendImageAndName",
                            "styles": "display:flex;flex-direction:column;;label:textBoxForfriendImageAndName;",
                            "toString": [Function],
                          }
                        }
                      >
                        <div
                          className="css-12vyxyu-textBoxForfriendImageAndName"
                        >
                          <EmotionCssPropInternal
                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                            css={
                              Object {
                                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                "name": "22trbl-name-UserInfo",
                                "next": undefined,
                                "styles": "margin-left:12px;color:black;;label:name;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                "toString": [Function],
                              }
                            }
                          >
                            <span
                              className="css-22trbl-name-UserInfo"
                            >
                              Test
                            </span>
                          </EmotionCssPropInternal>
                          <EmotionCssPropInternal
                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                            css={
                              Object {
                                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                "name": "5stdwm-recommendation-UserInfo",
                                "next": undefined,
                                "styles": "margin-left:12px;font-size:14px;;label:recommendation;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                "toString": [Function],
                              }
                            }
                          >
                            <span
                              className="css-5stdwm-recommendation-UserInfo"
                            >
                              recommendation
                            </span>
                          </EmotionCssPropInternal>
                        </div>
                      </EmotionCssPropInternal>
                      <EmotionCssPropInternal
                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                        css={
                          Object {
                            "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                            "name": "wqfdse-followButton-UserInfo",
                            "next": undefined,
                            "styles": "position:absolute;right:0;top:50%;transform:translateY(-50%);color:#2196f3;;label:followButton;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                            "toString": [Function],
                          }
                        }
                      >
                        <span
                          className="css-wqfdse-followButton-UserInfo"
                        >
                           팔로우 
                        </span>
                      </EmotionCssPropInternal>
                    </div>
                  </EmotionCssPropInternal>
                </div>
              </EmotionCssPropInternal>
            </div>
          </EmotionCssPropInternal>
          <EmotionCssPropInternal
            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
            css={
              Object {
                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "name": "p0f4xo-dunnoText-UserInfo",
                "next": undefined,
                "styles": "color:#c7c7c7;max-width:293px;font-size:12px;margin-bottom:10px;;label:dunnoText;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "toString": [Function],
              }
            }
          >
            <div
              className="css-p0f4xo-dunnoText-UserInfo"
            >
              소개-도움말-홍보센터-API-채용정보-개인정보처리방침-약관-위치-인기계정-해시태그-언어
            </div>
          </EmotionCssPropInternal>
          <EmotionCssPropInternal
            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="UserInfo"
            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
            css={
              Object {
                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "name": "x1mlku-dunnoText-UserInfo",
                "next": undefined,
                "styles": "color:#c7c7c7;max-width:293px;font-size:12px;margin-bottom:10px;;label:dunnoText;;;label:UserInfo;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "toString": [Function],
              }
            }
          >
            <div
              className="css-x1mlku-dunnoText-UserInfo"
            >
              © 2020 BONGSTAGRAM
            </div>
          </EmotionCssPropInternal>
        </div>
      </EmotionCssPropInternal>
    </div>
  </EmotionCssPropInternal>
</UserInfo>
`;
